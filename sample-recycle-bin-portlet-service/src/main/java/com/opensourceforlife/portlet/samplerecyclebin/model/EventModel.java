package com.opensourceforlife.portlet.samplerecyclebin.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.trash.model.TrashEntry;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Event service. Represents a row in the &quot;SRB_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.opensourceforlife.portlet.samplerecyclebin.model.impl.EventModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.opensourceforlife.portlet.samplerecyclebin.model.impl.EventImpl}.
 * </p>
 *
 * @author Opensourceforlife
 * @see Event
 * @see com.opensourceforlife.portlet.samplerecyclebin.model.impl.EventImpl
 * @see com.opensourceforlife.portlet.samplerecyclebin.model.impl.EventModelImpl
 * @generated
 */
public interface EventModel extends BaseModel<Event>, StagedModel, TrashedModel,
    WorkflowedModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a event model instance should use the {@link Event} interface instead.
     */

    /**
     * Returns the primary key of this event.
     *
     * @return the primary key of this event
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this event.
     *
     * @param primaryKey the primary key of this event
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the uuid of this event.
     *
     * @return the uuid of this event
     */
    @AutoEscape
    @Override
    public String getUuid();

    /**
     * Sets the uuid of this event.
     *
     * @param uuid the uuid of this event
     */
    @Override
    public void setUuid(String uuid);

    /**
     * Returns the event ID of this event.
     *
     * @return the event ID of this event
     */
    public long getEventId();

    /**
     * Sets the event ID of this event.
     *
     * @param eventId the event ID of this event
     */
    public void setEventId(long eventId);

    /**
     * Returns the company ID of this event.
     *
     * @return the company ID of this event
     */
    @Override
    public long getCompanyId();

    /**
     * Sets the company ID of this event.
     *
     * @param companyId the company ID of this event
     */
    @Override
    public void setCompanyId(long companyId);

    /**
     * Returns the group ID of this event.
     *
     * @return the group ID of this event
     */
    public long getGroupId();

    /**
     * Sets the group ID of this event.
     *
     * @param groupId the group ID of this event
     */
    public void setGroupId(long groupId);

    /**
     * Returns the user ID of this event.
     *
     * @return the user ID of this event
     */
    public long getUserId();

    /**
     * Sets the user ID of this event.
     *
     * @param userId the user ID of this event
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this event.
     *
     * @return the user uuid of this event
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this event.
     *
     * @param userUuid the user uuid of this event
     */
    public void setUserUuid(String userUuid);

    /**
     * Returns the create date of this event.
     *
     * @return the create date of this event
     */
    @Override
    public Date getCreateDate();

    /**
     * Sets the create date of this event.
     *
     * @param createDate the create date of this event
     */
    @Override
    public void setCreateDate(Date createDate);

    /**
     * Returns the modified date of this event.
     *
     * @return the modified date of this event
     */
    @Override
    public Date getModifiedDate();

    /**
     * Sets the modified date of this event.
     *
     * @param modifiedDate the modified date of this event
     */
    @Override
    public void setModifiedDate(Date modifiedDate);

    /**
     * Returns the name of this event.
     *
     * @return the name of this event
     */
    @AutoEscape
    public String getName();

    /**
     * Sets the name of this event.
     *
     * @param name the name of this event
     */
    public void setName(String name);

    /**
     * Returns the description of this event.
     *
     * @return the description of this event
     */
    @AutoEscape
    public String getDescription();

    /**
     * Sets the description of this event.
     *
     * @param description the description of this event
     */
    public void setDescription(String description);

    /**
     * Returns the date of this event.
     *
     * @return the date of this event
     */
    public Date getDate();

    /**
     * Sets the date of this event.
     *
     * @param date the date of this event
     */
    public void setDate(Date date);

    /**
     * Returns the status of this event.
     *
     * @return the status of this event
     */
    @Override
    public int getStatus();

    /**
     * Sets the status of this event.
     *
     * @param status the status of this event
     */
    @Override
    public void setStatus(int status);

    /**
     * Returns the status by user ID of this event.
     *
     * @return the status by user ID of this event
     */
    @Override
    public long getStatusByUserId();

    /**
     * Sets the status by user ID of this event.
     *
     * @param statusByUserId the status by user ID of this event
     */
    @Override
    public void setStatusByUserId(long statusByUserId);

    /**
     * Returns the status by user uuid of this event.
     *
     * @return the status by user uuid of this event
     * @throws SystemException if a system exception occurred
     */
    @Override
    public String getStatusByUserUuid() throws SystemException;

    /**
     * Sets the status by user uuid of this event.
     *
     * @param statusByUserUuid the status by user uuid of this event
     */
    @Override
    public void setStatusByUserUuid(String statusByUserUuid);

    /**
     * Returns the status by user name of this event.
     *
     * @return the status by user name of this event
     */
    @AutoEscape
    @Override
    public String getStatusByUserName();

    /**
     * Sets the status by user name of this event.
     *
     * @param statusByUserName the status by user name of this event
     */
    @Override
    public void setStatusByUserName(String statusByUserName);

    /**
     * Returns the status date of this event.
     *
     * @return the status date of this event
     */
    @Override
    public Date getStatusDate();

    /**
     * Sets the status date of this event.
     *
     * @param statusDate the status date of this event
     */
    @Override
    public void setStatusDate(Date statusDate);

    /**
     * Returns the trash entry created when this event was moved to the Recycle Bin. The trash entry may belong to one of the ancestors of this event.
     *
     * @return the trash entry created when this event was moved to the Recycle Bin
     * @throws SystemException if a system exception occurred
     */
    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException;

    /**
     * Returns the class primary key of the trash entry for this event.
     *
     * @return the class primary key of the trash entry for this event
     */
    @Override
    public long getTrashEntryClassPK();

    /**
     * Returns the trash handler for this event.
     *
     * @return the trash handler for this event
     */
    @Override
    public TrashHandler getTrashHandler();

    /**
     * Returns <code>true</code> if this event is in the Recycle Bin.
     *
     * @return <code>true</code> if this event is in the Recycle Bin; <code>false</code> otherwise
     */
    @Override
    public boolean isInTrash();

    /**
     * Returns <code>true</code> if the parent of this event is in the Recycle Bin.
     *
     * @return <code>true</code> if the parent of this event is in the Recycle Bin; <code>false</code> otherwise
     * @throws SystemException if a system exception occurred
     */
    @Override
    public boolean isInTrashContainer();

    /**
     * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
     */
    @Override
    public boolean getApproved();

    /**
     * Returns <code>true</code> if this event is approved.
     *
     * @return <code>true</code> if this event is approved; <code>false</code> otherwise
     */
    @Override
    public boolean isApproved();

    /**
     * Returns <code>true</code> if this event is denied.
     *
     * @return <code>true</code> if this event is denied; <code>false</code> otherwise
     */
    @Override
    public boolean isDenied();

    /**
     * Returns <code>true</code> if this event is a draft.
     *
     * @return <code>true</code> if this event is a draft; <code>false</code> otherwise
     */
    @Override
    public boolean isDraft();

    /**
     * Returns <code>true</code> if this event is expired.
     *
     * @return <code>true</code> if this event is expired; <code>false</code> otherwise
     */
    @Override
    public boolean isExpired();

    /**
     * Returns <code>true</code> if this event is inactive.
     *
     * @return <code>true</code> if this event is inactive; <code>false</code> otherwise
     */
    @Override
    public boolean isInactive();

    /**
     * Returns <code>true</code> if this event is incomplete.
     *
     * @return <code>true</code> if this event is incomplete; <code>false</code> otherwise
     */
    @Override
    public boolean isIncomplete();

    /**
     * Returns <code>true</code> if this event is pending.
     *
     * @return <code>true</code> if this event is pending; <code>false</code> otherwise
     */
    @Override
    public boolean isPending();

    /**
     * Returns <code>true</code> if this event is scheduled.
     *
     * @return <code>true</code> if this event is scheduled; <code>false</code> otherwise
     */
    @Override
    public boolean isScheduled();

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(Event event);

    @Override
    public int hashCode();

    @Override
    public CacheModel<Event> toCacheModel();

    @Override
    public Event toEscapedModel();

    @Override
    public Event toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
